/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10,15,26,27,28,29,30,59],$V1=[2,4],$V2=[1,8],$V3=[1,7],$V4=[1,4],$V5=[1,5],$V6=[1,10,26,27,28,29,30,59],$V7=[2,12],$V8=[1,11],$V9=[1,2,9,10,15,26,27,28,29,30,37,54,59],$Va=[2,74],$Vb=[1,25],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,36],$Vi=[1,2,9,10,15,26,27,28,29,30,59],$Vj=[1,43],$Vk=[1,47],$Vl=[1,53],$Vm=[2,10],$Vn=[1,64],$Vo=[1,67],$Vp=[1,70],$Vq=[1,81],$Vr=[1,77],$Vs=[1,78],$Vt=[1,73],$Vu=[1,75],$Vv=[1,76],$Vw=[1,79],$Vx=[1,80],$Vy=[1,71],$Vz=[1,72],$VA=[1,2,10,26,27,28,29,30,54,59],$VB=[2,13,14,23,25],$VC=[2,16],$VD=[2,10,26,27,28,29,30,42,67,68,69,74,75,78],$VE=[1,125],$VF=[1,126],$VG=[1,127],$VH=[1,128],$VI=[1,129],$VJ=[1,130],$VK=[1,131],$VL=[1,132],$VM=[1,133],$VN=[1,134],$VO=[1,135],$VP=[1,136],$VQ=[1,137],$VR=[1,138],$VS=[1,139],$VT=[1,140],$VU=[13,14,25,37,70,84,85,86,87,88,89,91,92,93,94,95,96,97,98,99,100],$VV=[2,26,27,28,29,30,37],$VW=[1,148],$VX=[1,152],$VY=[13,14],$VZ=[25,37],$V_=[1,186],$V$=[1,198],$V01=[13,14,25,37,70,84,85,89,91,92,93,94,95,96,97,98,99,100],$V11=[13,14,25,37,70,84,85,86,87,89,91,92,93,94,95,96,97,98,99,100],$V21=[13,14,25,37,70,91,92,93,94,95,96,97,98,99,100],$V31=[13,14,25,37,70,98,99,100];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"saltos":4,"importacion":5,"insertez":6,"sentenciasGlobales":7,"comodinImpor":8,"IMPORT":9,"IDD":10,"PUNTO":11,"EXTENSIONCLR":12,"SALTO":13,"EOF":14,"INSERTEZA":15,"DECIMAL":16,"ENTERO":17,"variables":18,"tipo":19,"items_coma":20,"comodinItems":21,"items":22,"IGUAL":23,"asignacion":24,"COMA":25,"DOUBLE":26,"INT":27,"BOOLEAN":28,"CHAR":29,"STRING":30,"asignVar":31,"operation":32,"funtions":33,"comodinIDFun":34,"sentenciasFuncion":35,"comss":36,"PARENTESISC":37,"DOPUNTO":38,"parametros":39,"PARENTESISA":40,"retornoFuntion":41,"RETURN":42,"param":43,"sentenciaFn":44,"identadorRecu":45,"defSi":46,"defMientras":47,"defPara":48,"defMostrar":49,"defSino":50,"llamadaFun":51,"graficando":52,"comodinIdentado":53,"IDENTADOR":54,"metod":55,"comodinVerificador":56,"sentenciasMetod":57,"comodinMetod":58,"VOID":59,"funPrincipal":60,"comodinFunPrim":61,"PRINCIPAL":62,"parametrosLlamada":63,"llamadaFunOP":64,"comoidnOP":65,"sentenciaGlobales":66,"SI":67,"SINO":68,"PARA":69,"PUNTOCOMA":70,"incremDecrem":71,"MASMAS":72,"MENOSMENOS":73,"MIENTRAS":74,"MOSTRAR":75,"parametroMostrar":76,"stringOidd":77,"DIBUJAREXP":78,"terminalsOP":79,"TRUE":80,"FALSE":81,"CARACTER":82,"CADENA":83,"MAS":84,"MENOS":85,"POR":86,"DIVISION":87,"ELEVADO":88,"MOD":89,"NEGADO":90,"EQUALS":91,"NOEQUALS":92,"MENORQ":93,"MAYORQ":94,"MENOROI":95,"MAYOROI":96,"SIGINSERTEZA":97,"OR":98,"AND":99,"XOR":100,"$accept":0,"$end":1},
terminals_: {2:"error",9:"IMPORT",10:"IDD",11:"PUNTO",12:"EXTENSIONCLR",13:"SALTO",14:"EOF",15:"INSERTEZA",16:"DECIMAL",17:"ENTERO",23:"IGUAL",25:"COMA",26:"DOUBLE",27:"INT",28:"BOOLEAN",29:"CHAR",30:"STRING",37:"PARENTESISC",38:"DOPUNTO",40:"PARENTESISA",42:"RETURN",54:"IDENTADOR",59:"VOID",62:"PRINCIPAL",67:"SI",68:"SINO",69:"PARA",70:"PUNTOCOMA",72:"MASMAS",73:"MENOSMENOS",74:"MIENTRAS",75:"MOSTRAR",78:"DIBUJAREXP",80:"TRUE",81:"FALSE",82:"CARACTER",83:"CADENA",84:"MAS",85:"MENOS",86:"POR",87:"DIVISION",88:"ELEVADO",89:"MOD",90:"NEGADO",91:"EQUALS",92:"NOEQUALS",93:"MENORQ",94:"MAYORQ",95:"MENOROI",96:"MAYOROI",97:"SIGINSERTEZA",98:"OR",99:"AND",100:"XOR"},
productions_: [0,[3,4],[3,3],[5,2],[5,0],[8,5],[8,2],[4,2],[4,1],[4,1],[6,3],[6,3],[6,0],[18,2],[20,2],[20,2],[21,1],[22,2],[22,2],[22,1],[22,2],[19,1],[19,1],[19,1],[19,1],[19,1],[31,3],[24,2],[24,2],[33,3],[34,3],[34,4],[36,3],[41,3],[41,2],[41,2],[39,3],[39,1],[39,2],[43,2],[35,2],[35,1],[35,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[45,2],[45,1],[53,1],[55,4],[56,2],[56,3],[58,3],[57,2],[57,1],[57,2],[60,3],[61,5],[51,4],[51,5],[64,3],[64,4],[63,3],[63,1],[63,2],[65,1],[7,2],[7,0],[66,1],[66,1],[66,1],[66,1],[66,1],[46,6],[50,3],[48,13],[71,1],[71,1],[47,6],[49,5],[76,3],[76,1],[76,2],[77,1],[52,5],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
Parser.yy.table.anlizarImport($$[$0-3]+""+$$[$0-2]+""+$$[$0-1])
break;
case 6: case 15: case 20: case 28: case 35: case 38: case 42: case 62: case 71: case 89:
Parser.yy.errores.capturarErrorSintactico(this._$.first_line, this._$.first_column,yytext)
break;
case 10: case 11:
Parser.yy.table.claseTem.valorInzerteza = Number($$[$0-1]) 
break;
case 13: case 118:
this.$ = $$[$0-1]
break;
case 16:
Parser.yy.table.claseTem.capturaItems(yytext)
break;
case 21:
tipoAux = Parser.yy.tipoVar.DOUBLE; this.$ = yytext
break;
case 22:
tipoAux = Parser.yy.tipoVar.INT; this.$ = yytext
break;
case 23:
tipoAux = Parser.yy.tipoVar.BOOLEAN; this.$ = yytext
break;
case 24:
tipoAux = Parser.yy.tipoVar.CHAR; this.$ = yytext
break;
case 25:
tipoAux = Parser.yy.tipoVar.STRING; this.$ = yytext
break;
case 26: case 67:
this.$ = $$[$0-2]
break;
case 27:
contenidoVar = $$[$0-1]
break;
case 29: case 56: case 63:
Parser.yy.table.claseTem.capturarInstruccioneFuncion()
break;
case 30: case 31:
Parser.yy.table.verificarFuncion()
break;
case 32:
Parser.yy.table.claseTem.instanciaNewFuncion($$[$0-1],tipoAux)
break;
case 33:
Parser.yy.table.verificadorRetorno($$[$0-1])
break;
case 34:
Parser.yy.table.verificarReturnMetod()
break;
case 39:
Parser.yy.table.claseTem.capturarParametros($$[$0],tipoAux)
break;
case 40: case 41:
Parser.yy.table.controlCero()
break;
case 43:
Parser.yy.table.claseTem.capturarVariableFuncion(tipoAux,contenidoVar); contenidoVar = null; Parser.yy.table.scope = 0; Parser.yy.table.verificadorScope(false,false, false,$$[$0])
break;
case 44:
Parser.yy.table.asignarValorVarFunOGlobal($$[$0],contenidoVar); contenidoVar = null; Parser.yy.table.scope = 0; Parser.yy.table.verificadorScope(false,false, false,$$[$0])
break;
case 45:
Parser.yy.table.verificadorScope(true,false, true,"Si"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 46:
Parser.yy.table.verificadorScope(false,false, true,"Mientras"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 47:
Parser.yy.table.verificadorScope(false,false, true,"Para"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 48:
Parser.yy.table.verificadorScope(false,false, false,"Mostrar"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 49:
Parser.yy.table.verificadorScope(false,true, true,"Sino"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 50:
Parser.yy.table.verificadorScope(false,false, false,"Retorno"); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 51:
Parser.yy.table.verificadorScope(false,false, false,$$[$0]); Parser.yy.table.valoFuncion($$[$0]+"", false, false); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 52:
Parser.yy.table.verificadorScope(false,false, false,$$[$0]); contenidoVar = null; Parser.yy.table.scope = 0; 
break;
case 55:
Parser.yy.table.scope++; scope++; Parser.yy.table.scopeVerific++;
break;
case 57: case 58:
Parser.yy.table.verificarFuncion();
break;
case 59:
Parser.yy.table.claseTem.instanciaNewFuncion($$[$0-1],Parser.yy.tipoVar.VOID)
break;
case 64:
Parser.yy.table.claseTem.instanciaNewFuncion($$[$0-3],Parser.yy.tipoVar.VOID)
break;
case 65: case 68:
this.$ = $$[$0-3]
break;
case 66:
this.$ = $$[$0-4]
break;
case 72:
Parser.yy.table.capturarParametros($$[$0])
break;
case 75:
Parser.yy.table.existReturn()
break;
case 76:
Parser.yy.table.asignarValorVarGlobal($$[$0]+"",contenidoVar); contenidoVar = null
break;
case 77:
Parser.yy.table.capturarVariableGlobal(tipoAux,contenidoVar);contenidoVar = null
break;
case 80:
Parser.yy.table.validarSi($$[$0-3])
break;
case 86:
/*verificar que el primer item sea string*/
break;
case 90:
/*atrapar el itema para verificar su contenido*/
break;
case 92:
this.$ = true; 
break;
case 93:
this.$ = false; 
break;
case 94: case 95:
this.$ = Number(yytext); 
break;
case 96: case 97:
this.$ = yytext; 
break;
case 98:
this.$ = Parser.yy.table.contenidoVariable($$[$0]+"");
break;
case 99:
this.$ = Parser.yy.table.valoFuncion($$[$0]+"", true, false)
break;
case 100:
this.$ = Parser.yy.opCast.suma($$[$0-2],$$[$0]); 
break;
case 101:
this.$ = Parser.yy.opCast.resta($$[$0-2],$$[$0])
break;
case 102:
this.$ = Parser.yy.opCast.multiplicacion($$[$0-2],$$[$0])
break;
case 103:
this.$ = Parser.yy.opCast.division($$[$0-2],$$[$0])
break;
case 104:
this.$ = Parser.yy.opCast.potencia($$[$0-2],$$[$0])
break;
case 105:
this.$ = Parser.yy.opCast.modulo($$[$0-2],$$[$0])
break;
case 106:
this.$ = Parser.yy.opCast.negativo($$[$0]);
break;
case 107:
this.$ = Parser.yy.opRelatins.expresionNegation($$[$0])
break;
case 108:
this.$ = Parser.yy.opRelatins.expresionEquals($$[$0-2],$$[$0])
break;
case 109:
this.$ = Parser.yy.opRelatins.expresioNoEquals($$[$0-2],$$[$0])
break;
case 110:
this.$ = Parser.yy.opRelatins.expresioMenorQ($$[$0-2],$$[$0])
break;
case 111:
this.$ = Parser.yy.opRelatins.expresioMayorQ($$[$0-2],$$[$0])
break;
case 112:
this.$ = Parser.yy.opRelatins.expresioMenorOI($$[$0-2],$$[$0])
break;
case 113:
this.$ = Parser.yy.opRelatins.expresioMayorOI($$[$0-2],$$[$0])
break;
case 114:
this.$ = Parser.yy.opRelatins.comparacionIncertezaF($$[$0-2],$$[$0])
break;
case 115:
this.$ = Parser.yy.opRelatins.expresionOR($$[$0-2],$$[$0])
break;
case 116:
this.$ = Parser.yy.opRelatins.expresionAnd($$[$0-2],$$[$0])
break;
case 117:
this.$ = Parser.yy.opRelatins.expresionXOR($$[$0-2],$$[$0])
break;
case 119:
this.$ = $$[$0]
break;
}
},
table: [o($V0,$V1,{3:1,4:2,5:3,8:6,2:$V2,9:$V3,13:$V4,14:$V5}),{1:[3]},o($V0,$V1,{8:6,5:9,2:$V2,9:$V3}),o($V6,$V7,{6:10,15:$V8}),o($V9,[2,8],{4:12,13:$V4,14:$V5}),o($V9,[2,9]),o($V0,$V1,{8:6,5:13,2:$V2,9:$V3}),{10:[1,14]},{4:15,13:$V4,14:$V5},o($V6,$V7,{6:16,15:$V8}),{1:$Va,7:17,10:$Vb,18:21,19:26,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,31:20,33:19,34:24,36:29,55:22,56:27,58:35,59:$Vh,60:23,61:28,66:18},{16:[1,37],17:[1,38]},o($V9,[2,7]),o($V0,[2,3]),{11:[1,39]},o($Vi,[2,6]),{1:$Va,7:40,10:$Vb,18:21,19:26,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,31:20,33:19,34:24,36:29,55:22,56:27,58:35,59:$Vh,60:23,61:28,66:18},{1:[2,2]},{1:$Va,7:41,10:$Vb,18:21,19:26,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,31:20,33:19,34:24,36:29,55:22,56:27,58:35,59:$Vh,60:23,61:28,66:18},o($V6,[2,75]),o($V6,[2,76]),o($V6,[2,77]),o($V6,[2,78]),o($V6,[2,79]),{4:42,13:$V4,14:$V5},{23:$Vj},{2:$Vk,10:[1,45],20:44,21:46},{38:[1,48]},{4:49,13:$V4,14:$V5},{2:$Vl,19:54,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,37:[1,50],39:51,43:52},o($Vm,[2,21]),o($Vm,[2,22]),o($Vm,[2,23]),o($Vm,[2,24]),o($Vm,[2,25]),{2:$Vl,19:54,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,37:[1,55],39:56,43:52},{10:[1,58],62:[1,57]},{4:59,13:$V4,14:$V5},{4:60,13:$V4,14:$V5},{12:[1,61]},{1:[2,1]},{1:[2,73]},{2:$Vn,35:62,44:63,45:65,53:66,54:$Vo},{2:$Vp,10:$Vq,16:$Vr,17:$Vs,24:68,32:69,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},o($VA,[2,13]),o($VB,$VC,{40:[1,83]}),{2:[1,88],4:87,13:$V4,14:$V5,22:84,23:[1,85],25:[1,86]},{4:89,13:$V4,14:$V5},{4:90,13:$V4,14:$V5},{2:$Vn,35:91,44:63,45:65,53:66,54:$Vo},{38:[1,92]},{37:[1,93]},{25:[1,94],37:[2,37]},{4:95,13:$V4,14:$V5},{10:[1,96]},{38:[2,57]},{37:[1,97]},{40:[1,98]},{40:[1,99]},o($V6,$Vm),o($V6,[2,11]),{4:100,13:$V4,14:$V5},o($V6,[2,29]),o($V6,[2,41],{44:63,45:65,53:66,35:101,2:$Vn,54:$Vo}),{4:102,13:$V4,14:$V5},{2:[1,121],10:[1,114],18:103,19:113,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,31:104,41:110,42:[1,120],46:105,47:106,48:107,49:108,50:109,51:111,52:112,67:[1,115],68:[1,119],69:[1,117],74:[1,116],75:[1,118],78:[1,122]},o($VD,[2,54],{53:66,45:123,54:$Vo}),o([2,10,26,27,28,29,30,42,54,67,68,69,74,75,78],[2,55]),o($VA,[2,26]),{4:124,13:$V4,14:$V5,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{4:141,13:$V4,14:$V5},{10:$Vq,16:$Vr,17:$Vs,32:142,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:143,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:144,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},o($VU,[2,119]),o($VU,[2,92]),o($VU,[2,93]),o($VU,[2,94]),o($VU,[2,95]),o($VU,[2,96]),o($VU,[2,97]),o($VU,[2,98],{40:[1,145]}),o($VU,[2,99]),o($VV,[2,32]),o($VA,[2,14]),{2:$Vp,10:$Vq,16:$Vr,17:$Vs,24:146,32:69,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{2:$Vk,10:$VW,20:147,21:46},o($VA,[2,19]),{4:149,13:$V4,14:$V5},o($VA,[2,15]),{2:$VX,44:151,45:65,53:66,54:$Vo,57:150},o($V6,[2,63]),o($VY,[2,30]),{38:[1,153]},{2:$Vl,19:54,26:$Vc,27:$Vd,28:$Ve,29:$Vf,30:$Vg,39:154,43:52},{37:[2,38]},o($VZ,[2,39]),{38:[2,58]},{37:[1,155]},o($VV,[2,59]),o($Vi,[2,5]),o($V6,[2,40]),o($V6,[2,42]),o($VA,[2,43]),o($VA,[2,44]),o($VA,[2,45]),o($VA,[2,46]),o($VA,[2,47]),o($VA,[2,48]),o($VA,[2,49]),o($VA,[2,50]),o($VA,[2,51]),o($VA,[2,52]),{2:$Vk,10:$VW,20:44,21:46},{23:$Vj,40:[1,156]},{40:[1,157]},{40:[1,158]},{40:[1,159]},{40:[1,160]},{38:[1,161]},{4:163,10:$Vq,13:$V4,14:$V5,16:$Vr,17:$Vs,32:162,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{4:164,13:$V4,14:$V5},{40:[1,165]},o($VD,[2,53]),o($VA,[2,27]),{10:$Vq,16:$Vr,17:$Vs,32:166,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:167,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:168,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:169,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:170,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:171,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:172,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:173,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:174,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:175,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:176,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:177,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:178,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:179,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:180,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:181,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},o($VA,[2,28]),o($VU,[2,106]),o($VU,[2,107]),{37:[1,182],84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{2:$V_,10:$Vq,16:$Vr,17:$Vs,32:187,37:[1,183],40:$Vt,63:184,64:82,65:185,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},o($VA,[2,17]),o($VA,[2,18]),o($VB,$VC),o($VA,[2,20]),o($V6,[2,56]),o($V6,[2,61],{45:65,53:66,44:151,57:188,2:$VX,54:$Vo}),{4:189,13:$V4,14:$V5},o($VY,[2,31]),{37:[2,36]},{38:[1,190]},{2:$V_,10:$Vq,16:$Vr,17:$Vs,32:187,37:[1,191],40:$Vt,63:192,64:82,65:185,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:193,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{10:$Vq,16:$Vr,17:$Vs,32:194,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{27:[1,195]},{2:$V$,10:$Vq,16:$Vr,17:$Vs,32:199,40:$Vt,64:82,76:196,77:197,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{4:200,13:$V4,14:$V5},{4:201,13:$V4,14:$V5,84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($VA,[2,34]),o($VA,[2,35]),{10:$Vq,16:$Vr,17:$Vs,32:202,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},o($V01,[2,100],{86:$VG,87:$VH,88:$VI}),o($V01,[2,101],{86:$VG,87:$VH,88:$VI}),o($V11,[2,102],{88:$VI}),o($V11,[2,103],{88:$VI}),o($VU,[2,104]),o($V01,[2,105],{86:$VG,87:$VH,88:$VI}),o($V21,[2,108],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ}),o($V21,[2,109],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ}),o($V21,[2,110],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ}),o($V21,[2,111],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ}),o($V21,[2,112],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ}),o($V21,[2,113],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ}),o($V21,[2,114],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ}),o($V31,[2,115],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ}),o($V31,[2,116],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ}),o($V31,[2,117],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ}),o($VU,[2,118]),o($VU,[2,67]),{37:[1,203]},{25:[1,204],37:[2,70]},{4:205,13:$V4,14:$V5},o($VZ,[2,72],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT}),o($V6,[2,60]),o($V6,[2,62]),o($VY,[2,64]),{4:206,13:$V4,14:$V5},{37:[1,207]},{37:[1,208],84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{37:[1,209],84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{10:[1,210]},{37:[1,211]},{25:[1,212],37:[2,88]},{4:213,13:$V4,14:$V5},o($VZ,[2,90],{84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT}),o($VA,[2,81]),o($VA,[2,33]),{37:[1,214],84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},o($VU,[2,68]),{2:$V_,10:$Vq,16:$Vr,17:$Vs,32:187,40:$Vt,63:215,64:82,65:185,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{37:[2,71]},o($VA,[2,65]),{4:216,13:$V4,14:$V5},{38:[1,217]},{38:[1,218]},{23:[1,219]},{4:220,13:$V4,14:$V5},{2:$V$,10:$Vq,16:$Vr,17:$Vs,32:199,40:$Vt,64:82,76:221,77:197,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{37:[2,89]},{4:222,13:$V4,14:$V5},{37:[2,69]},o($VA,[2,66]),{4:223,13:$V4,14:$V5},{4:224,13:$V4,14:$V5},{10:$Vq,16:$Vr,17:$Vs,32:225,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},o($VA,[2,86]),{37:[2,87]},o($VA,[2,91]),o($VA,[2,80]),o($VA,[2,85]),{70:[1,226],84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{10:$Vq,16:$Vr,17:$Vs,32:227,40:$Vt,64:82,79:74,80:$Vu,81:$Vv,82:$Vw,83:$Vx,85:$Vy,90:$Vz},{70:[1,228],84:$VE,85:$VF,86:$VG,87:$VH,88:$VI,89:$VJ,91:$VK,92:$VL,93:$VM,94:$VN,95:$VO,96:$VP,97:$VQ,98:$VR,99:$VS,100:$VT},{71:229,72:[1,230],73:[1,231]},{37:[1,232]},{37:[2,83]},{37:[2,84]},{38:[1,233]},{4:234,13:$V4,14:$V5},o($VA,[2,82])],
defaultActions: {17:[2,2],40:[2,1],41:[2,73],55:[2,57],95:[2,38],97:[2,58],154:[2,36],205:[2,71],213:[2,89],215:[2,69],221:[2,87],230:[2,83],231:[2,84]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let tipoAux
let contenidoVar = null
let scope = 0
let operationCondicion = ""
let capturarOperadors = false
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Comentario de una linea*/
break;
case 1:/*comentrio multilinea xd*/    
break;
case 2:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 54
break;
case 3:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 13
break;
case 4:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); /*ignoramos */  
break;
case 5:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 15
break;
case 6:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 9
break;
case 7:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 11
break;
case 8:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 12
break;
case 9:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 80
break;
case 10:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 81
break;
case 11:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); Parser.yy.errores.capturaTokenstring(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 83; 
break;
case 12:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); Parser.yy.errores.capturaTokenstring(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 82; 
break;
case 13:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 26
break;
case 14:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 28
break;
case 15:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 27
break;
case 16:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 30
break;
case 17:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 29
break;
case 18:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 59
break;
case 19:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 92
break;
case 20:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 95
break;
case 21:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 96
break;
case 22:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 91
break;
case 23:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 23
break;
case 24:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 90
break;
case 25:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 93
break;
case 26:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 94
break;
case 27:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 97
break;
case 28:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column);  return 99
break;
case 29:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 98
break;
case 30:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 100
break;
case 31:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 42
break;
case 32:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 62
break;
case 33:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 68
break;
case 34:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 67
break;
case 35:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 72
break;
case 36:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 73
break;
case 37:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 69
break;
case 38:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 74
break;
case 39:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'DETENER'
break;
case 40:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'CONTINUAR'
break;
case 41:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 75
break;
case 42:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'LLAVEA'
break;
case 43:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'LLAVEC'
break;
case 44:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'DIBUJARAST'
break;
case 45:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 78
break;
case 46:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 'DIBUJARTS'
break;
case 47:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 16
break;
case 48:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 10
break;
case 49:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 17
break;
case 50:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 38
break;
case 51:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 70
break;
case 52:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 25
break;
case 53:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 86
break;
case 54:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 87
break;
case 55:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 85
break;
case 56:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 84
break;
case 57:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 88
break;
case 58:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 89
break;
case 59:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 40
break;
case 60:Parser.yy.errores.capturaTokens(yy_.yytext, yy_.yylloc.last_line, yy_.yylloc.last_column); return 37
break;
case 61:  return 14
break;
case 62:Parser.yy.errores.capturaErrorLexico(yy_.yylloc.first_line, yy_.yylloc.first_column, yytex)
break;
}
},
rules: [/^(?:!!.*)/,/^(?:'''(.|\f|\n|\r|\s|\t)*''')/,/^(?:[\t])/,/^(?:[\n])/,/^(?:\s+)/,/^(?:Incerteza\b)/,/^(?:Importar\b)/,/^(?:\.)/,/^(?:crl\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"[^\"]*")/,/^(?:'[^]')/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:Int\b)/,/^(?:String\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\|&)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Sino\b)/,/^(?:Si\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:\{)/,/^(?:\})/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:((_)?[a-zA-Z]+(_|[a-zA-Z0-9]+)*))/,/^(?:[0-9]+\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Interprete;
exports.Parser = Interprete.Parser;
exports.parse = function () { return Interprete.parse.apply(Interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}