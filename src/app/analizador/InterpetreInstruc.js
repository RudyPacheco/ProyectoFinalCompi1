/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var InterpetreInstruc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,10],$V3=[1,12],$V4=[1,2,10],$V5=[2,40],$V6=[1,2,10,38],$V7=[2,16,20,21,22,23,24,28,42,44,45,50,51,78],$V8=[1,44],$V9=[1,65],$Va=[1,57],$Vb=[1,59],$Vc=[1,60],$Vd=[1,61],$Ve=[1,62],$Vf=[1,63],$Vg=[1,64],$Vh=[1,55],$Vi=[1,56],$Vj=[1,75],$Vk=[1,79],$Vl=[1,86],$Vm=[1,90],$Vn=[1,91],$Vo=[1,92],$Vp=[1,93],$Vq=[1,94],$Vr=[1,95],$Vs=[1,96],$Vt=[1,97],$Vu=[1,98],$Vv=[1,99],$Vw=[1,100],$Vx=[1,101],$Vy=[1,102],$Vz=[1,103],$VA=[1,104],$VB=[1,105],$VC=[6,7,19,38,46,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77],$VD=[1,120],$VE=[1,113],$VF=[1,116],$VG=[1,117],$VH=[1,114],$VI=[1,115],$VJ=[1,118],$VK=[1,119],$VL=[1,111],$VM=[1,112],$VN=[19,38],$VO=[1,156],$VP=[1,157],$VQ=[1,158],$VR=[1,159],$VS=[1,160],$VT=[1,161],$VU=[1,162],$VV=[1,163],$VW=[1,164],$VX=[1,165],$VY=[1,166],$VZ=[1,167],$V_=[1,168],$V$=[1,169],$V01=[1,170],$V11=[38,61,62,63,64,65,66,68,70,71,72,73,74,75,76,77],$V21=[6,7,19,38,46,61,62,66,68,69,70,71,72,73,74,75,76,77],$V31=[6,7,19,38,46,61,62,63,64,66,68,69,70,71,72,73,74,75,76,77],$V41=[6,7,19,38,46,68,69,70,71,72,73,74,75,76,77],$V51=[6,7,19,38,46,75,76,77],$V61=[38,61,62,66,68,70,71,72,73,74,75,76,77],$V71=[38,61,62,63,64,66,68,70,71,72,73,74,75,76,77],$V81=[38,68,70,71,72,73,74,75,76,77],$V91=[38,75,76,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"saltos":4,"sentenciasFuncion":5,"SALTO":6,"EOF":7,"identadorRecu":8,"comodinIdentado":9,"IDENTADOR":10,"variables":11,"tipo":12,"items_coma":13,"comodinItems":14,"items":15,"IDD":16,"IGUAL":17,"asignacion":18,"COMA":19,"DOUBLE":20,"INT":21,"BOOLEAN":22,"CHAR":23,"STRING":24,"asignVar":25,"operation":26,"retornoFuntion":27,"RETURN":28,"sentenciaFn":29,"defSi":30,"defMientras":31,"defPara":32,"defMostrar":33,"defSino":34,"llamadaFun":35,"graficando":36,"PARENTESISA":37,"PARENTESISC":38,"parametrosLlamada":39,"llamadaFunOP":40,"comoidnOP":41,"SI":42,"DOPUNTO":43,"SINO":44,"PARA":45,"PUNTOCOMA":46,"incremDecrem":47,"MASMAS":48,"MENOSMENOS":49,"MIENTRAS":50,"MOSTRAR":51,"parametroMostrar":52,"stringOidd":53,"terminalsOP":54,"TRUE":55,"FALSE":56,"DECIMAL":57,"ENTERO":58,"CARACTER":59,"CADENA":60,"MAS":61,"MENOS":62,"POR":63,"DIVISION":64,"ELEVADO":65,"MOD":66,"NEGADO":67,"EQUALS":68,"NOEQUALS":69,"MENORQ":70,"MAYORQ":71,"MENOROI":72,"MAYOROI":73,"SIGINSERTEZA":74,"OR":75,"AND":76,"XOR":77,"DIBUJAREXP":78,"operationGrafica":79,"$accept":0,"$end":1},
terminals_: {2:"error",6:"SALTO",7:"EOF",10:"IDENTADOR",16:"IDD",17:"IGUAL",19:"COMA",20:"DOUBLE",21:"INT",22:"BOOLEAN",23:"CHAR",24:"STRING",28:"RETURN",37:"PARENTESISA",38:"PARENTESISC",42:"SI",43:"DOPUNTO",44:"SINO",45:"PARA",46:"PUNTOCOMA",48:"MASMAS",49:"MENOSMENOS",50:"MIENTRAS",51:"MOSTRAR",55:"TRUE",56:"FALSE",57:"DECIMAL",58:"ENTERO",59:"CARACTER",60:"CADENA",61:"MAS",62:"MENOS",63:"POR",64:"DIVISION",65:"ELEVADO",66:"MOD",67:"NEGADO",68:"EQUALS",69:"NOEQUALS",70:"MENORQ",71:"MAYORQ",72:"MENOROI",73:"MAYOROI",74:"SIGINSERTEZA",75:"OR",76:"AND",77:"XOR",78:"DIBUJAREXP"},
productions_: [0,[3,2],[3,1],[3,2],[4,2],[4,1],[4,1],[8,2],[8,1],[9,1],[11,2],[11,2],[13,2],[14,1],[15,2],[15,2],[15,1],[15,2],[12,1],[12,1],[12,1],[12,1],[12,1],[25,3],[18,2],[18,2],[27,3],[27,2],[5,2],[5,1],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,2],[29,1],[35,4],[35,5],[35,1],[40,3],[40,4],[39,3],[39,1],[39,2],[41,1],[30,6],[34,3],[32,13],[47,1],[47,1],[31,6],[33,5],[52,3],[52,1],[52,2],[53,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,1],[36,5],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,2],[79,2],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1],[79,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 9:
Parser.yy.fun.scope++
break;
case 10:
Parser.yy.fun.actulizarValorDeclara()
break;
case 13:
Parser.yy.fun.capturarIdentificadores($$[$0]) 
break;
case 18:
tipoAux = Parser.yy.tipoVar.DOUBLE
break;
case 19:
tipoAux = Parser.yy.tipoVar.INT
break;
case 20:
tipoAux = Parser.yy.tipoVar.BOOLEAN
break;
case 21:
tipoAux = Parser.yy.tipoVar.CHAR
break;
case 22:
tipoAux = Parser.yy.tipoVar.STRING
break;
case 23:
Parser.yy.fun.capturarIdentificadores($$[$0-2]); Parser.yy.fun.actulizarValorAsig(Parser.yy.table)
break;
case 24:
Parser.yy.fun.contenidVar = $$[$0-1]
break;
case 26:
Parser.yy.fun.capturarRetorno($$[$0-1])
break;
case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37:
Parser.yy.fun.scope = 0
break;
case 38:
Parser.yy.table.valoFuncion($$[$0]+"", false, Parser.yy.fun.realizar()); Parser.yy.fun.scope = 0;
break;
case 39:
Parser.yy.fun.scope = 0; 
break;
case 41: case 45:
this.$ = $$[$0-3]
break;
case 42:
this.$ = $$[$0-4]
break;
case 44:
this.$ = $$[$0-2]
break;
case 49:
Parser.yy.table.capturarParametros($$[$0])
break;
case 50:
Parser.yy.fun.capturarValorSi($$[$0-3])
break;
case 51:
Parser.yy.fun.capturarValorSino()
break;
case 56:
Parser.yy.fun.realizarMostrar(Parser.yy.table)
break;
case 60:
 Parser.yy.fun.capturarItems($$[$0])
break;
case 61:
this.$ = true; 
break;
case 62:
this.$ = false; 
break;
case 63: case 64:
this.$ = Number(yytext); 
break;
case 65: case 66:
this.$ = yytext; 
break;
case 67:
this.$ = Parser.yy.table.contenidoVariableIstr($$[$0]+"", Parser.yy.fun);
break;
case 68:
this.$ = Parser.yy.table.valoFuncion($$[$0]+"",true, Parser.yy.fun.realizar())
break;
case 69:
this.$ = Parser.yy.opCast.suma($$[$0-2],$$[$0]); 
break;
case 70:
this.$ = Parser.yy.opCast.resta($$[$0-2],$$[$0])
break;
case 71:
this.$ = Parser.yy.opCast.multiplicacion($$[$0-2],$$[$0])
break;
case 72:
this.$ = Parser.yy.opCast.division($$[$0-2],$$[$0])
break;
case 73:
this.$ = Parser.yy.opCast.potencia($$[$0-2],$$[$0])
break;
case 74:
this.$ = Parser.yy.opCast.modulo($$[$0-2],$$[$0])
break;
case 75:
this.$ = Parser.yy.opCast.negativo($$[$0]);
break;
case 76:
this.$ = Parser.yy.opRelatins.expresionNegation($$[$0])
break;
case 77:
this.$ = Parser.yy.opRelatins.expresionEquals($$[$0-2],$$[$0])
break;
case 78:
this.$ = Parser.yy.opRelatins.expresioNoEquals($$[$0-2],$$[$0])
break;
case 79:
this.$ = Parser.yy.opRelatins.expresioMenorQ($$[$0-2],$$[$0])
break;
case 80:
this.$ = Parser.yy.opRelatins.expresioMayorQ($$[$0-2],$$[$0])
break;
case 81:
this.$ = Parser.yy.opRelatins.expresioMenorOI($$[$0-2],$$[$0])
break;
case 82:
this.$ = Parser.yy.opRelatins.expresioMayorOI($$[$0-2],$$[$0])
break;
case 83:
this.$ = Parser.yy.opRelatins.comparacionIncerteza($$[$0-2],$$[$0],Parser.yy.fun)
break;
case 84:
this.$ = Parser.yy.opRelatins.expresionOR($$[$0-2],$$[$0])
break;
case 85:
this.$ = Parser.yy.opRelatins.expresionAnd($$[$0-2],$$[$0])
break;
case 86:
this.$ = Parser.yy.opRelatins.expresionXOR($$[$0-2],$$[$0])
break;
case 87: case 107:
this.$ = $$[$0-1]
break;
case 88:
this.$ = $$[$0]
break;
case 89:
Parser.yy.fun.agregarNodoArbol(Parser.yy.arbol, $$[$0-2])
break;
case 90: case 94:
this.$ = new Parser.yy.nodo("+","Aritm",[$$[$0-2],$$[$0]]);
break;
case 91:
this.$ = new Parser.yy.nodo("-","Aritm",[$$[$0-2],$$[$0]]);
break;
case 92:
this.$ = new Parser.yy.nodo("*","Aritm",[$$[$0-2],$$[$0]]);
break;
case 93:
this.$ = new Parser.yy.nodo("/","Aritm",[$$[$0-2],$$[$0]]); 
break;
case 95:
this.$ = new Parser.yy.nodo("%","MOD",[$$[$0-2],$$[$0]]);
break;
case 96:
this.$ = new Parser.yy.nodo("-","Aritm",[$$[$0-1],$$[$01]]);
break;
case 97:
this.$ = new Parser.yy.nodo("!","Logica",[$$[$0-1],$$[$01]]);
break;
case 98:
this.$ = new Parser.yy.nodo("==","Relacio",[$$[$0-2],$$[$0]]);
break;
case 99:
this.$ = new Parser.yy.nodo("<","Relacio",[$$[$0-2],$$[$0]]);
break;
case 100:
this.$ = new Parser.yy.nodo(">","Relacio",[$$[$0-2],$$[$0]]);
break;
case 101:
this.$ = new Parser.yy.nodo("<=","Relacio",[$$[$0-2],$$[$0]]);
break;
case 102:
this.$ = new Parser.yy.nodo(">=","Relacio",[$$[$0-2],$$[$0]]);
break;
case 103:
this.$ = new Parser.yy.nodo("~","Insert",[$$[$0-2],$$[$0]]);
break;
case 104:
this.$ = new Parser.yy.nodo("||","Logica",[$$[$0-2],$$[$0]]);
break;
case 105:
this.$ = new Parser.yy.nodo("&&","Logica",[$$[$0-2],$$[$0]]);
break;
case 106:
this.$ = new Parser.yy.nodo("|&","Logica",[$$[$0-2],$$[$0]]); 
break;
case 108:
this.$ = new Parser.yy.nodo($$[$0],"Double",[]);
break;
case 109:
this.$ = new Parser.yy.nodo($$[$0],"Number",[]);
break;
case 110:
this.$ = new Parser.yy.nodo("true","Boolean",[]);
break;
case 111:
this.$ = new Parser.yy.nodo("false","Boolean",[]);
break;
case 112:
this.$ = new Parser.yy.nodo($$[$0],"Caracter",[]);
break;
case 113:
this.$ = new Parser.yy.nodo($$[$0],"Cadena",[]);
break;
case 114:
this.$ = new Parser.yy.nodo($$[$0],"Variable",[]);
break;
}
},
table: [{2:[1,4],3:1,4:2,5:3,6:$V0,7:$V1,8:8,9:9,10:$V2,29:7},{1:[3]},{2:$V3,5:11,8:8,9:9,10:$V2,29:7},{1:[2,2]},o($V4,$V5,{4:13,6:$V0,7:$V1}),o($V6,[2,5],{4:14,6:$V0,7:$V1}),o($V6,[2,6]),{1:[2,29],2:$V3,5:15,8:8,9:9,10:$V2,29:7},{2:[1,27],11:16,12:26,16:[1,28],20:[1,36],21:[1,37],22:[1,38],23:[1,39],24:[1,40],25:17,27:23,28:[1,34],30:18,31:19,32:20,33:21,34:22,35:24,36:25,42:[1,29],44:[1,33],45:[1,31],50:[1,30],51:[1,32],78:[1,35]},o($V7,[2,8],{9:9,8:41,10:$V2}),o([2,10,16,20,21,22,23,24,28,42,44,45,50,51,78],[2,9]),{1:[2,1]},o($V4,$V5),{1:[2,3]},o($V6,[2,4]),{1:[2,28]},o($V4,[2,30]),o($V4,[2,31]),o($V4,[2,32]),o($V4,[2,33]),o($V4,[2,34]),o($V4,[2,35]),o($V4,[2,36]),o($V4,[2,37]),o($V4,[2,38]),o($V4,[2,39]),{13:42,14:43,16:$V8},o($V4,[2,43],{4:45,6:$V0,7:$V1}),{17:[1,46],37:[1,47]},{37:[1,48]},{37:[1,49]},{37:[1,50]},{37:[1,51]},{43:[1,52]},{4:54,6:$V0,7:$V1,16:$V9,26:53,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{37:[1,67]},{16:[2,18]},{16:[2,19]},{16:[2,20]},{16:[2,21]},{16:[2,22]},o($V7,[2,7]),o($V4,[2,10]),{2:[1,72],4:71,6:$V0,7:$V1,15:68,17:[1,69],19:[1,70]},o([2,6,7,17,19],[2,13]),o($V4,[2,11]),{2:$Vj,16:$V9,18:73,26:74,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{2:$Vk,16:$V9,26:80,37:$Va,38:[1,76],39:77,40:66,41:78,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:81,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:82,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{21:[1,83]},{2:$Vl,16:$V9,26:87,37:$Va,40:66,52:84,53:85,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{4:88,6:$V0,7:$V1},{4:89,6:$V0,7:$V1,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB},o($V4,[2,27]),{16:$V9,26:106,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:107,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:108,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},o($VC,[2,88]),o($VC,[2,61]),o($VC,[2,62]),o($VC,[2,63]),o($VC,[2,64]),o($VC,[2,65]),o($VC,[2,66]),o($VC,[2,67],{37:[1,109]}),o($VC,[2,68]),{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:110},o($V4,[2,12]),{2:$Vj,16:$V9,18:121,26:74,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{13:122,14:43,16:$V8},o($V4,[2,16]),{4:123,6:$V0,7:$V1},o($V4,[2,23]),{4:124,6:$V0,7:$V1,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB},{4:125,6:$V0,7:$V1},{4:126,6:$V0,7:$V1},{38:[1,127]},{19:[1,128],38:[2,47]},{4:129,6:$V0,7:$V1},o($VN,[2,49],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB}),{38:[1,130],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB},{38:[1,131],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB},{16:[1,132]},{38:[1,133]},{19:[1,134],38:[2,58]},{4:135,6:$V0,7:$V1},o($VN,[2,60],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB}),o($V4,[2,51]),o($V4,[2,26]),{16:$V9,26:136,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:137,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:138,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:139,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:140,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:141,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:142,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:143,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:144,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:145,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:146,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:147,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:148,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:149,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:150,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{16:$V9,26:151,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},o($VC,[2,75]),o($VC,[2,76]),{38:[1,152],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB},{2:$Vk,16:$V9,26:80,37:$Va,38:[1,153],39:154,40:66,41:78,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{38:[1,155],61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,68:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ,75:$V_,76:$V$,77:$V01},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:171},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:172},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:173},o($V11,[2,108]),o($V11,[2,109]),o($V11,[2,110]),o($V11,[2,111]),o($V11,[2,112]),o($V11,[2,113]),o($V11,[2,114]),o($V4,[2,14]),o($V4,[2,15]),o($V4,[2,17]),o($V4,[2,24]),o($V4,[2,25]),o($V4,[2,41]),{4:174,6:$V0,7:$V1},{2:$Vk,16:$V9,26:80,37:$Va,39:175,40:66,41:78,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{38:[2,48]},{43:[1,176]},{43:[1,177]},{17:[1,178]},{4:179,6:$V0,7:$V1},{2:$Vl,16:$V9,26:87,37:$Va,40:66,52:180,53:85,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{38:[2,59]},o($V21,[2,69],{63:$Vo,64:$Vp,65:$Vq}),o($V21,[2,70],{63:$Vo,64:$Vp,65:$Vq}),o($V31,[2,71],{65:$Vq}),o($V31,[2,72],{65:$Vq}),o($VC,[2,73]),o($V21,[2,74],{63:$Vo,64:$Vp,65:$Vq}),o($V41,[2,77],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr}),o($V41,[2,78],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr}),o($V41,[2,79],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr}),o($V41,[2,80],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr}),o($V41,[2,81],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr}),o($V41,[2,82],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr}),o($V41,[2,83],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr}),o($V51,[2,84],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy}),o($V51,[2,85],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy}),o($V51,[2,86],{61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy}),o($VC,[2,87]),o($VC,[2,44]),{38:[1,181]},{4:182,6:$V0,7:$V1},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:183},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:184},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:185},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:186},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:187},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:188},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:189},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:190},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:191},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:192},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:193},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:194},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:195},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:196},{16:$VD,37:$VE,55:$VF,56:$VG,57:$VH,58:$VI,59:$VJ,60:$VK,62:$VL,67:$VM,79:197},o($V11,[2,96]),o($V11,[2,97]),{38:[1,198],61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,68:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ,75:$V_,76:$V$,77:$V01},o($V4,[2,42]),{38:[2,46]},{4:199,6:$V0,7:$V1},{4:200,6:$V0,7:$V1},{16:$V9,26:201,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},o($V4,[2,56]),{38:[2,57]},o($VC,[2,45]),o($V4,[2,89]),o($V61,[2,90],{63:$VQ,64:$VR,65:$VS}),o($V61,[2,91],{63:$VQ,64:$VR,65:$VS}),o($V71,[2,92],{65:$VS}),o($V71,[2,93],{65:$VS}),o($V11,[2,94]),o($V61,[2,95],{63:$VQ,64:$VR,65:$VS}),o($V81,[2,98],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V81,[2,99],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V81,[2,100],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V81,[2,101],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V81,[2,102],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V81,[2,103],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT}),o($V91,[2,104],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,68:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ}),o($V91,[2,105],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,68:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ}),o($V91,[2,106],{61:$VO,62:$VP,63:$VQ,64:$VR,65:$VS,66:$VT,68:$VU,70:$VV,71:$VW,72:$VX,73:$VY,74:$VZ}),o($V11,[2,107]),o($V4,[2,50]),o($V4,[2,55]),{46:[1,202],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB},{16:$V9,26:203,37:$Va,40:66,54:58,55:$Vb,56:$Vc,57:$Vd,58:$Ve,59:$Vf,60:$Vg,62:$Vh,67:$Vi},{46:[1,204],61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,72:$Vw,73:$Vx,74:$Vy,75:$Vz,76:$VA,77:$VB},{47:205,48:[1,206],49:[1,207]},{38:[1,208]},{38:[2,53]},{38:[2,54]},{43:[1,209]},{4:210,6:$V0,7:$V1},o($V4,[2,52])],
defaultActions: {3:[2,2],11:[2,1],13:[2,3],15:[2,28],36:[2,18],37:[2,19],38:[2,20],39:[2,21],40:[2,22],129:[2,48],135:[2,59],175:[2,46],180:[2,57],206:[2,53],207:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

let tipoAux
let contenidoVar = null
let scope = 0
let operationCondicion = ""
let capturarOperadors = false
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Comentario de una linea*/
break;
case 1:/*comentrio multilinea xd*/    
break;
case 2: return 10
break;
case 3: return 6
break;
case 4: /*ignoramos */  
break;
case 5: return 'IMPORT'
break;
case 6: return 'PUNTO'
break;
case 7: return 'EXTENSIONCLR'
break;
case 8: return 'INSERTEZA'
break;
case 9: return 55
break;
case 10:  return 56
break;
case 11:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);   return 60; 
break;
case 12:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);   return 59; 
break;
case 13:return 20
break;
case 14:return 22
break;
case 15: return 21
break;
case 16:return 24
break;
case 17:return 23
break;
case 18:return 'VOID'
break;
case 19:return 69
break;
case 20:return 72
break;
case 21:return 73
break;
case 22:return 68
break;
case 23:return 17
break;
case 24:return 67
break;
case 25:return 70
break;
case 26:return 71
break;
case 27:return 74
break;
case 28:return 77
break;
case 29:return 76
break;
case 30:return 75
break;
case 31:return 28
break;
case 32:return 'PRINCIPAL'
break;
case 33:return 44
break;
case 34:return 42
break;
case 35:return 48
break;
case 36:return 49
break;
case 37:return 45
break;
case 38:return 50
break;
case 39:return 'DETENER'
break;
case 40:return 'CONTINUAR'
break;
case 41:return 51
break;
case 42:return 'LLAVEA'
break;
case 43:return 'LLAVEC'
break;
case 44:return 'DIBUJARAST'
break;
case 45:return 78
break;
case 46:return 'DIBUJARTS'
break;
case 47:return 57
break;
case 48:return 16
break;
case 49:return 58
break;
case 50:return 43
break;
case 51:return 46
break;
case 52:return 19
break;
case 53:return 63
break;
case 54:return 64
break;
case 55:return 62
break;
case 56:return 61
break;
case 57:return 65
break;
case 58:return 66
break;
case 59:return 37
break;
case 60:return 38
break;
case 61:  return 7
break;
case 62://manejo de errores lexicos
break;
}
},
rules: [/^(?:!!.*)/,/^(?:'''(.|\f|\n|\r|\s|\t)*''')/,/^(?:[\t])/,/^(?:[\n])/,/^(?:\s+)/,/^(?:Importar\b)/,/^(?:\.)/,/^(?:crl\b)/,/^(?:Incerteza\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:"[^\"]*")/,/^(?:'[^]')/,/^(?:Double\b)/,/^(?:Boolean\b)/,/^(?:Int\b)/,/^(?:String\b)/,/^(?:Char\b)/,/^(?:Void\b)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!)/,/^(?:<)/,/^(?:>)/,/^(?:~)/,/^(?:\|&)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:Retorno\b)/,/^(?:Principal\b)/,/^(?:Sino\b)/,/^(?:Si\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:Para\b)/,/^(?:Mientras\b)/,/^(?:Detener\b)/,/^(?:Continuar\b)/,/^(?:Mostrar\b)/,/^(?:\{)/,/^(?:\})/,/^(?:DibujarAST\b)/,/^(?:DibujarEXP\b)/,/^(?:DibujarTS\b)/,/^(?:[0-9]+\.[0-9]+\b)/,/^(?:((_)?[a-zA-Z]+(_|[a-zA-Z0-9]+)*))/,/^(?:[0-9]+\b)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = InterpetreInstruc;
exports.Parser = InterpetreInstruc.Parser;
exports.parse = function () { return InterpetreInstruc.parse.apply(InterpetreInstruc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}